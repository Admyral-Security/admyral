from typing import Annotated
from admyral.workflow import workflow, Schedule
from admyral.typings import JsonValue
from admyral.action import action, ArgumentMetadata
from admyral.actions import (
    search_jira_issues,
    batched_send_slack_message_to_user_by_email,
)


"""
Setup

1. Create a Slack app (https://api.slack.com/apps)
2. Go to "Interactivity & Shortcuts" and enable interactivity
3. In the Request URL field enter the URL of the Admyral Webhook trigger

"""


@action(
    display_name="Transform Jira Issues to Slack",
    display_namespace="Jira",
    description="Transform Jira Issues to Slack",
)
def transform_jira_to_slack(
    jira_tickets: Annotated[
        JsonValue,
        ArgumentMetadata(
            display_name="Jira tickets", description="Result of Jira Ticket Search"
        ),
    ],
    message_input: Annotated[
        str,
        ArgumentMetadata(
            display_name="Message Input",
            description="Describe the type of message that should be displayed. E.g., Recent SLA breach",
        ),
    ],
):
    result = []
    for jira_ticket in jira_tickets:
        key = jira_ticket["key"]
        title = jira_ticket["fields"]["summary"]
        creator = jira_ticket["fields"]["creator"]["displayName"]
        status = jira_ticket["fields"]["status"]["name"]
        created = jira_ticket["fields"]["created"]

        result.append(
            (
                "ch.grittner@gmail.com",
                f"{message_input}: [{key}] {title} \nCreated by: {creator} \nStatus: {status} \nCreated on: {created}",
                None,
            )
        )

    return result


@workflow(
    description="Monitoring of vulnerability SLA breaches",
    triggers=[Schedule(interval_days=1)],
)
def vulnerability_sla_breach(payload: dict[str, JsonValue]):
    # filter for jira tickets that didn't change in the last 7 days
    no_change_last_7_days = search_jira_issues(
        jql='project = SJ AND status IN ("In Progress", "To Do") AND updated < -1w AND updated >= -8d',  # AND priority IN (Highest, High)
        limit=1000,
        secrets={"JIRA_SECRET": "jira_secret"},
    )

    transformed_no_change = transform_jira_to_slack(
        jira_tickets=no_change_last_7_days,
        message_input="ðŸš¨ No progress in the last 7 days ðŸš¨",
    )

    batched_send_slack_message_to_user_by_email(
        messages=transformed_no_change, secrets={"SLACK_SECRET": "slack_secret"}
    )

    # filter for jira tickets whose SLA is about to be breached (10 days left)
    soon_breached_slas = search_jira_issues(
        jql='project = SJ AND status IN ("In Progress", "To Do") AND created = -80d',  # AND priority IN (Highest, High)
        limit=1000,
        secrets={"JIRA_SECRET": "jira_secret"},
    )

    transformed_soon_breached = transform_jira_to_slack(
        jira_tickets=soon_breached_slas,
        message_input="ðŸš¨ About to be breached SLAs in 10 days ðŸš¨",
    )

    batched_send_slack_message_to_user_by_email(
        messages=transformed_soon_breached, secrets={"SLACK_SECRET": "slack_secret"}
    )

    # filter for jira tickets that just breached SLA
    breached_slas = search_jira_issues(
        jql='project = SJ AND status IN ("In Progress", "To Do") AND created = -91d',  # AND priority IN (Highest, High)
        limit=1000,
        secrets={"JIRA_SECRET": "jira_secret"},
    )

    transformed_breached = transform_jira_to_slack(
        jira_tickets=breached_slas, message_input="ðŸš¨ Just breached SLAs ðŸš¨"
    )

    batched_send_slack_message_to_user_by_email(
        messages=transformed_breached, secrets={"SLACK_SECRET": "slack_secret"}
    )
