generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user_profiles {
  user_id            String        @id @db.Uuid
  email              String
  email_confirmed_at DateTime?     @db.Timestamp(6)
  credentials        credentials[]
  workflows          workflows[]
}

enum ActionType {
  Webhook
  HttpRequest
}

model actions {
  action_id                         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_id                       String           @db.Uuid
  action_name                       String
  reference_handle                  String
  action_type                       ActionType
  action_description                String
  action_definition                 Json
  workflows                         workflows        @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade, onUpdate: NoAction)
  webhooks                          webhooks[]
  workflow_edges_child_action_node  workflow_edges[] @relation("workflow_edges_child_action_id")
  workflow_edges_parent_action_node workflow_edges[] @relation("workflow_edges_parent_action_id")
}

model credentials {
  user_id          String        @db.Uuid
  credential_name  String
  encrypted_secret String
  users            user_profiles @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, credential_name])
}

model webhooks {
  webhook_id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action_id      String  @db.Uuid
  webhook_secret String?
  actions        actions @relation(fields: [action_id], references: [action_id], onDelete: Cascade, onUpdate: NoAction)
}

model workflow_edges {
  parent_action_id         String    @db.Uuid
  child_action_id          String    @db.Uuid
  workflow_id              String    @db.Uuid
  actions_child_action_id  actions   @relation("workflow_edges_child_action_id", fields: [child_action_id], references: [action_id], onDelete: Cascade, onUpdate: NoAction)
  actions_parent_action_id actions   @relation("workflow_edges_parent_action_id", fields: [parent_action_id], references: [action_id], onDelete: Cascade, onUpdate: NoAction)
  workflows                workflows @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([parent_action_id, child_action_id])
}

model workflow_run_states {
  run_id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_id            String    @db.Uuid
  started_timestamp      DateTime  @default(now()) @db.Timestamp(6)
  last_updated_timestamp DateTime  @default(now()) @db.Timestamp(6)
  completed_timestamp    DateTime? @db.Timestamp(6)
  run_state              Json
  workflows              workflows @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade, onUpdate: NoAction)
}

model workflows {
  workflow_id          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_name        String
  workflow_description String
  is_live              Boolean
  user_id              String                @db.Uuid
  actions              actions[]
  workflow_edges       workflow_edges[]
  workflow_run_states  workflow_run_states[]
  users                user_profiles         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
