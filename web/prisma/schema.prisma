generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model actions {
  action_id                                               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_id                                             String           @db.Uuid
  action_name                                             String
  reference_handle                                        String
  action_description                                      String
  action_definition                                       Json
  workflows                                               workflows        @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade, onUpdate: NoAction)
  webhooks                                                webhooks[]
  workflow_edges_workflow_edges_child_action_idToactions  workflow_edges[] @relation("workflow_edges_child_action_idToactions")
  workflow_edges_workflow_edges_parent_action_idToactions workflow_edges[] @relation("workflow_edges_parent_action_idToactions")

  @@schema("public")
}

model credentials {
  user_id          String @db.Uuid
  credential_name  String
  encrypted_secret String
  users            users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, credential_name])
  @@schema("public")
}

model webhooks {
  webhook_id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action_id      String  @db.Uuid
  webhook_secret String
  actions        actions @relation(fields: [action_id], references: [action_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model workflow_edges {
  parent_action_id                                 String    @db.Uuid
  child_action_id                                  String    @db.Uuid
  workflow_id                                      String    @db.Uuid
  parent_reference_handle                          String
  child_reference_handle                           String
  actions_workflow_edges_child_action_idToactions  actions   @relation("workflow_edges_child_action_idToactions", fields: [child_action_id], references: [action_id], onDelete: Cascade, onUpdate: NoAction)
  actions_workflow_edges_parent_action_idToactions actions   @relation("workflow_edges_parent_action_idToactions", fields: [parent_action_id], references: [action_id], onDelete: Cascade, onUpdate: NoAction)
  workflows                                        workflows @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([parent_action_id, child_action_id])
  @@schema("public")
}

model workflow_run_states {
  run_id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_id            String    @db.Uuid
  started_timestamp      DateTime  @default(now()) @db.Timestamp(6)
  last_updated_timestamp DateTime  @default(now()) @db.Timestamp(6)
  completed_timestamp    DateTime? @db.Timestamp(6)
  run_state              Json
  workflows              workflows @relation(fields: [workflow_id], references: [workflow_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model workflows {
  workflow_id          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_name        String
  workflow_description String
  is_live              Boolean
  user_id              String                @db.Uuid
  actions              actions[]
  workflow_edges       workflow_edges[]
  workflow_run_states  workflow_run_states[]
  users                users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}
