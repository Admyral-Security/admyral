"""init

Revision ID: 2df41b795ffd
Revises: 
Create Date: 2024-04-21 17:19:17.347219

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2df41b795ffd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("create schema if not exists admyral")
    
    op.create_table('user_profile',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('email', sa.TEXT(), nullable=False),
    sa.Column('email_confirmed_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('company', sa.TEXT(), nullable=False),
    sa.Column('first_name', sa.TEXT(), nullable=False),
    sa.Column('last_name', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    schema='admyral'
    )
    op.create_table('credential',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('credential_name', sa.TEXT(), nullable=False),
    sa.Column('encrypted_secret', sa.TEXT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['admyral.user_profile.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'credential_name'),
    schema='admyral'
    )
    op.create_table('workflow',
    sa.Column('workflow_id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('workflow_name', sa.TEXT(), nullable=False),
    sa.Column('workflow_description', sa.TEXT(), nullable=False),
    sa.Column('is_live', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['admyral.user_profile.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('workflow_id'),
    schema='admyral'
    )
    op.create_table('action_node',
    sa.Column('action_id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('workflow_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('action_name', sa.TEXT(), nullable=False),
    sa.Column('reference_handle', sa.TEXT(), nullable=False),
    sa.Column('action_type', sa.Enum('HTTP_REQUEST', 'WEBHOOK', 'IF_CONDITION', name='actiontype'), nullable=False),
    sa.Column('action_description', sa.TEXT(), nullable=False),
    sa.Column('action_definition', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('x_position', sa.Float(), nullable=False),
    sa.Column('y_position', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['workflow_id'], ['admyral.workflow.workflow_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('action_id'),
    schema='admyral'
    )
    op.create_table('workflow_run',
    sa.Column('run_id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('workflow_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('started_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_timestamp', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['admyral.workflow.workflow_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('run_id'),
    schema='admyral'
    )
    op.create_table('webhook',
    sa.Column('webhook_id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('action_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('webhook_secret', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['admyral.action_node.action_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('webhook_id'),
    schema='admyral'
    )
    op.create_table('workflow_edge',
    sa.Column('parent_action_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('child_action_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('edge_type', sa.Enum('TRUE', 'FALSE', 'DEFAULT', name='edgetype'), nullable=False),
    sa.Column('parent_node_handle', sa.TEXT(), nullable=True),
    sa.Column('child_node_handle', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['child_action_id'], ['admyral.action_node.action_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_action_id'], ['admyral.action_node.action_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('parent_action_id', 'child_action_id'),
    schema='admyral'
    )
    op.create_table('workflow_run_action_state',
    sa.Column('action_state_id', sa.UUID(as_uuid=False), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('action_state', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('run_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('action_id', sa.UUID(as_uuid=False), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['admyral.action_node.action_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['run_id'], ['admyral.workflow_run.run_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('action_state_id'),
    schema='admyral'
    )

    # Install triggers for syncing from auth.users to admyral.user_profile

    # If we create a user in auth.users, we automatically create a user profiel in admyral.user_profile
    op.execute("""
    create or replace function public.handle_new_user()
    returns trigger as $$
    begin
        insert into admyral.user_profile (user_id, email, company, first_name, last_name)
        values (new.id, new.email, '', '', '');
        return new;
    end;
    $$ language plpgsql security definer;
    """)
    op.execute("""
    create or replace trigger on_auth_user_created
        after insert on auth.users
        for each row execute procedure public.handle_new_user();
    """)

    # If we delete a user in admyral.user_profiles, we automatically delete the user in auth.users
    op.execute("""
    create or replace function public.handle_user_delete()
    returns trigger as $$
    begin
        delete from auth.users where id = old.user_id;
        return old;
    end;
    $$ language plpgsql security definer;
    """)
    op.execute("""
    create or replace trigger on_profile_user_deleted
        after delete on admyral.user_profile
        for each row execute procedure public.handle_user_delete()
    """)

    # If a user confirms her/his email, then we propagate this information into the user_profiles table
    op.execute("""
    create or replace function public.handle_user_email_confirmed()
    returns trigger as $$
    begin
        if old.email_confirmed_at is NULL and new.email_confirmed_at is not NULL then
            update admyral.user_profile
            set email_confirmed_at = new.email_confirmed_at
            where user_id = new.id;
        end if;
        return new;
    end;
    $$ language plpgsql security definer;
    """)
    op.execute("""
    create or replace trigger on_profile_user_email_confirmed
        after update on admyral.user_profile
        for each row execute procedure public.handle_user_email_confirmed()
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("drop trigger on_auth_user_created on auth.users")
    op.execute("drop function public.handle_new_user()")

    op.execute("drop trigger on_profile_user_deleted on admyral.user_profile")
    op.execute("drop function public.handle_user_delete()")

    op.execute("drop trigger on_profile_user_email_confirmed on admyral.user_profile")
    op.execute("drop function public.handle_user_email_confirmed()")

    op.drop_table('workflow_run_action_state', schema='admyral')
    op.drop_table('workflow_edge', schema='admyral')
    op.drop_table('webhook', schema='admyral')
    op.drop_table('workflow_run', schema='admyral')
    op.drop_table('action_node', schema='admyral')
    op.drop_table('workflow', schema='admyral')
    op.drop_table('credential', schema='admyral')
    op.drop_table('user_profile', schema='admyral')

    op.execute("drop schema admyral cascade")
    # ### end Alembic commands ###
