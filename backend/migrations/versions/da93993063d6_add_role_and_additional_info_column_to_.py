"""add role and additional info column to user profile

Revision ID: da93993063d6
Revises: f3d9ded07cd8
Create Date: 2024-06-07 10:45:44.154213

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'da93993063d6'
down_revision = 'f3d9ded07cd8'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_profile', sa.Column('role', sa.TEXT(), nullable=True), schema='admyral')
    op.execute("UPDATE admyral.user_profile SET role = ''")
    op.alter_column('user_profile', 'role', nullable=False, schema='admyral')

    op.add_column('user_profile', sa.Column('additional_info', postgresql.ARRAY(sa.String()), nullable=True), schema='admyral')
    op.execute("UPDATE admyral.user_profile SET additional_info = ARRAY[]::TEXT[]")
    op.alter_column('user_profile', 'additional_info', nullable=False, schema='admyral')

    # If we create a user in auth.users, we automatically create a user profiel in admyral.user_profile
    op.execute("""
    create or replace function public.handle_new_user()
    returns trigger as $$
    begin
        insert into admyral.user_profile (user_id, email, company, first_name, last_name, role, additional_info)
        values (new.id, new.email, '', '', '', '', ARRAY[]::TEXT[]);
        return new;
    end;
    $$ language plpgsql security definer;
    """)
    op.execute("""
    create or replace trigger on_auth_user_created
        after insert on auth.users
        for each row execute procedure public.handle_new_user();
    """)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_profile', 'additional_info', schema='admyral')
    op.drop_column('user_profile', 'role', schema='admyral')

    op.execute("""
    create or replace function public.handle_new_user()
    returns trigger as $$
    begin
        insert into admyral.user_profile (user_id, email, company, first_name, last_name)
        values (new.id, new.email, '', '', '');
        return new;
    end;
    $$ language plpgsql security definer;
    """)
    op.execute("""
    create or replace trigger on_auth_user_created
        after insert on auth.users
        for each row execute procedure public.handle_new_user();
    """)
    # ### end Alembic commands ###
