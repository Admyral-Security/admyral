"""add api key schema

Revision ID: 467d74477f74
Revises: 7b3d4391fadf
Create Date: 2024-09-23 10:11:02.938317

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel  # noqa F401


# revision identifiers, used by Alembic.
revision: str = "467d74477f74"
down_revision: Union[str, None] = "7b3d4391fadf"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "api_keys",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", sa.TEXT(), nullable=False),
        sa.Column("user_id", sa.TEXT(), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("key", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_api_keys_key"), "api_keys", ["key"], unique=False)
    op.create_index(op.f("ix_api_keys_user_id"), "api_keys", ["user_id"], unique=False)

    # Check if we're using SQLite
    is_sqlite = op.get_context().dialect.name == "sqlite"

    if is_sqlite:
        # Use batch operations for SQLite
        with op.batch_alter_table("workflows", schema=None) as batch_op:
            batch_op.create_foreign_key(
                "fk_workflows_user_id_user",
                "User",
                ["user_id"],
                ["id"],
                ondelete="CASCADE",
            )
    else:
        op.create_foreign_key(
            "fk_workflows_user_id_user",
            "workflows",
            "User",
            ["user_id"],
            ["id"],
            ondelete="CASCADE",
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    is_sqlite = op.get_context().dialect.name == "sqlite"

    if is_sqlite:
        # Remove foreign key constraint for SQLite
        with op.batch_alter_table("workflows", schema=None) as batch_op:
            batch_op.drop_constraint("fk_workflows_user_id_user", type_="foreignkey")
    else:
        # Remove foreign key constraint for PostgreSQL
        op.drop_constraint("fk_workflows_user_id_user", "workflows", type_="foreignkey")

    op.drop_index(op.f("ix_api_keys_user_id"), table_name="api_keys")
    op.drop_index(op.f("ix_api_keys_key"), table_name="api_keys")
    op.drop_table("api_keys")
    # ### end Alembic commands ###
