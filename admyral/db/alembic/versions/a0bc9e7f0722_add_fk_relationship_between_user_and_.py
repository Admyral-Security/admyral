"""add fk relationship between user and secrets schema

Revision ID: a0bc9e7f0722
Revises: 467d74477f74
Create Date: 2024-09-28 20:35:12.746527

"""

from typing import Sequence, Union

from alembic import op
import sqlmodel  # noqa F401


# revision identifiers, used by Alembic.
revision: str = "a0bc9e7f0722"
down_revision: Union[str, None] = "467d74477f74"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if we're using SQLite
    is_sqlite = op.get_context().dialect.name == "sqlite"

    if is_sqlite:
        # Use batch operations for SQLite
        with op.batch_alter_table("secrets", schema=None) as batch_op:
            batch_op.create_foreign_key(
                "fk_secrets_user_id_user",
                "User",
                ["user_id"],
                ["id"],
                ondelete="CASCADE",
            )
    else:
        op.create_foreign_key(
            "fk_secrets_user_id_user",
            "secrets",
            "User",
            ["user_id"],
            ["id"],
            ondelete="CASCADE",
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    is_sqlite = op.get_context().dialect.name == "sqlite"

    if is_sqlite:
        # Remove foreign key constraint for SQLite
        with op.batch_alter_table("secrets", schema=None) as batch_op:
            batch_op.drop_constraint("fk_secrets_user_id_user", type_="foreignkey")
    else:
        # Remove foreign key constraint for PostgreSQL
        op.drop_constraint("fk_secrets_user_id_user", "secrets", type_="foreignkey")

    # ### end Alembic commands ###
