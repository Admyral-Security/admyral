# Compile nsjail
FROM python:3.12-slim-bookworm AS nsjail
RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom
RUN apt-get update && apt-get upgrade -y \
    && apt-get install -y \
    autoconf \
    bison \
    flex \
    gcc \
    g++ \
    git \
    libprotobuf-dev \
    libnl-route-3-dev \
    libtool \
    make \
    pkg-config \
    protobuf-compiler \
    vim \
    && rm -rf /var/lib/apt/lists/*
# TODO: we could think about fixing a version with git checkout
RUN git clone -b master --single-branch https://github.com/google/nsjail.git
RUN cd nsjail && make && mv nsjail /bin && cd .. && rm -rf /nsjail

# Prepare Python dependencies
FROM python:3.12-slim-bookworm AS requirements-stage
WORKDIR /tmp
RUN pip install poetry
COPY ./pyproject.toml ./poetry.lock* /tmp/
RUN poetry config virtualenvs.create false && \
    poetry export -f requirements.txt --output requirements.txt --without-hashes


# Build the final image
FROM python:3.12-slim-bookworm

# set working directory
WORKDIR /usr/src/app

# prevent python from writing pyc files to disk
ENV PYTHONDONTWRITEBYTECODE 1
# prevent python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom
RUN apt-get update && apt-get upgrade -y \
    && apt-get install -y \
    libprotobuf-dev \
    libnl-route-3-dev \
    vim \
    curl \
    && rm -rf /var/lib/apt/lists/*

# install python dependencies
RUN pip install --upgrade pip
COPY --from=requirements-stage /tmp/requirements.txt .
RUN pip install -r requirements.txt

# Install nsjail
COPY --from=nsjail /bin/nsjail /bin/nsjail

# add admyral
COPY . .
RUN pip install -e .

# Install steampipe and plugins
RUN /bin/sh -c "$(curl -fsSL https://steampipe.io/install/steampipe.sh)"
# Add a non-root 'steampipe' user and group
RUN groupadd -r steampipe && \
    useradd -r -g steampipe -d /home/steampipe -m -s /bin/bash -u 9193 steampipe
# RUN adduser --system --disabled-password --gecos "steampipe user" --shell /bin/bash --uid 9193 steampipe
# add a non-root 'steampipe' user
RUN mkdir -p /home/steampipe/.steampipe && \
    chown -R steampipe:steampipe /home/steampipe/.steampipe
# Change user to non-root
USER steampipe
# run steampipe once to initialize it
RUN steampipe service start && \
    # install steampipe dependencies
    steampipe plugin install aws && \
    steampipe service stop
